from enaml.widgets.api import Action, Label
from enaml.workbench.api import Extension

from psi.context.api import Parameter
from psi.controller.api import ExperimentAction, ExperimentCallback, Trigger
from psi.core.enaml.api import ExperimentManifest
from psi.experiment.api import StatusItem
from psi.data.sinks.api import TextStore


def save_results(workbench, manifest):
    data = workbench.get_plugin('psi.data')
    sink = data.find_sink(manifest.id)
    dispensed = workbench \
        .get_plugin('psi.controller') \
        .get_output(manifest.output_name) \
        .total_fired
    sink.save_mapping(manifest.id, {'n_dispensed': dispensed})


################################################################################
# Useful plugins
################################################################################
enamldef BaseRewardDispenser(ExperimentManifest): manifest:
    '''
    Defines generic reward dispenser that can be triggered by a TTL
    '''
    id = f'{output_name}_reward_dispenser'
    attr output_name
    attr label

    #: Name of event that is called when reward is delivered.
    attr event_name = 'deliver_reward'

    Extension:
        id = manifest.id + '.io'
        point = 'psi.controller.io'

        Trigger:
            target_name = f'sw_do::{manifest.output_name}'
            name = manifest.output_name

    Extension:
        id = manifest.id + '.status_item'
        point = 'psi.experiment.status'

        StatusItem:
            label = f'Total dispensed ({manifest.label})'
            Label:
                text << str(workbench \
                            .get_plugin('psi.controller') \
                            .get_output(manifest.output_name) \
                            .total_fired)

    Extension:
        id = manifest.id + '.data'
        point = 'psi.data.sinks'
        TextStore:
            name = manifest.id

    Extension:
        id = manifest.id + '.base_actions'
        point = 'psi.controller.actions'
        ExperimentCallback:
            event = 'experiment_end'
            callback = lambda *args, **kw: save_results(workbench, manifest)

    Extension:
        id = manifest.id + '.toolbar'
        point = 'psi.experiment.toolbar'
        rank = 2000
        Action:
            text = f'Dispense ({manifest.label})'
            triggered ::
                controller = workbench.get_plugin('psi.controller')
                controller.invoke_actions(manifest.event_name)
            enabled <<  workbench.get_plugin('psi.controller').experiment_state \
                not in ('initialized', 'stopped')


enamldef WaterBolusDispenser(BaseRewardDispenser): manifest:
    '''
    Subclasses generic reward dispenser to allow adjustment of trigger duration

    Some devices (e.g., solenoids) can be held open for a variable duration,
    allowing a variable size reward to be dispensed.
    '''
    id = f'{output_name}_bolus_dispenser'
    label = f'{output_name.replace("_", " ").capitalize()}'
    required = True

    # Name of output connected to solenoid for water dispenser
    attr output_name = 'water_dispense'
    attr parameter_name = f'{manifest.output_name}_duration'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = event_name
            command = f'{manifest.output_name}.fire'
            kwargs = {'duration': C.lookup(manifest.parameter_name)}

    Extension:
        id = manifest.id + '.parameters'
        point = 'psi.context.items'

        Parameter:
            name = manifest.parameter_name
            label = f'{manifest.label} trigger duration (s)'
            compact_label = 'D'
            default = 1
            scope = 'arbitrary'
            group_name = 'trial'


enamldef PelletDispenser(BaseRewardDispenser): manifest:
    '''
    Subclasses generic reward dispenser with fixed trigger duration for activating dispense.
    '''
    id = f'{output_name}_dispenser'
    output_name = 'pellet_dispense'
    attr duration = 0.1

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = event_name
            command = f'{manifest.output_name}.fire'
            kwargs = {'duration': duration}
