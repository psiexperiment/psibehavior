import json
from pathlib import Path
import pprint

from atom.api import Atom, Dict, Enum, Int, List, Str, Typed, Value
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox
from enaml.widgets.api import (
    Action, CheckBox, Container, GroupBox, Field, FileDialogEx, Label,
    MainWindow, Menu, MenuBar, ObjectCombo, PopupView, PushButton,
)

from cftscal.api import (
    generic_microphone_manager,
    list_speaker_connections,
    list_generic_microphone_connections,
    speaker_manager
)

from cftscal.plugins.settings import (
    SpeakerSettings,
    GenericMicrophoneSettings
)

# Register the paradigms so they show up in the manager
import psibehavior.paradigms

from psiapp.api import(
    load_experiments, AddRemoveCombo, Experiment, ExperimentSequence,
    ProcessManager,
)


class Settings(Atom):

    n_speakers = Int(1)
    n_microphones = Int(1)

    logging_level = Enum('trace', 'debug', 'info', 'warning', 'error')('info')
    animal = Str()
    experimenter = Str()
    note = Str()
    standard_notes = List(Str())
    standard_note = Str()

    #: List of available outputs that can be used for the speaker
    available_outputs = List()

    #: List of available inputs that can be used for the microphone
    available_inputs = List()

    #: List of `SpeakerConfig` that indicates the output name and device
    #: attached to the output.
    speaker_config = List()

    #: List of `GenericMicrophoenConmfig that indicates the input name and
    #: device attached to the input.
    mic_config = List()

    experiments = List(Typed(Experiment))

    process_manager = Typed(ProcessManager, {})

    def _default_available_outputs(self):
        outputs = list_speaker_connections()
        settings = [SpeakerSettings(output_name=n, output_label=l) for l, n in outputs.items()]
        return sorted(settings, key=lambda x: x.output_label)

    def _default_available_inputs(self):
        inputs = list_generic_microphone_connections()
        settings = [GenericMicrophoneSettings(input_name=n, input_label=l) for l, n in inputs.items()]
        return sorted(settings, key=lambda x: x.input_label)

    def _default_speaker_config(self):
        # Create the initial mapping of output channel to connected device.
        return [self.available_outputs[0] for i in range(self.n_speakers)]

    def _default_mic_config(self):
        # Create the initial mapping of input channel to connected device.
        return [self.available_inputs[0] for i in range(self.n_microphones)]

    def save_config(self, filename):
        info = {
            'logging_level': self.logging_level,
            'standard_notes': self.standard_notes,
        }
        info['speaker_config'] = [{'output_name': s.output_name, 'name': s.name} for s in self.speaker_config]
        info['mic_config'] = [{'input_name': s.input_name, 'name': s.name} for s in self.mic_config]
        info['experiments'] = [e.__getstate__() for e in self.experiments]

        filename = Path(filename)
        filename.write_text(json.dumps(info, indent=2))

    def load_config(self, filename=None):
        if filename is not None:
            filename = Path(filename)
            info = json.loads(filename.read_text())
        else:
            info = {}

        # Load connected devices from the file, but only update for connections
        # that exist on the system (e.g., if the IO file has been updated).
        # Make a copy of the existing speaker config and update the copy before
        # setting on the class attribute. This forces Enaml notification so the
        # GUI is updated.
        speaker_config = self.speaker_config.copy()
        saved_config = info.pop('speaker_config', [])[:self.n_speakers]
        for i, output_config in enumerate(saved_config):
            for o in self.available_outputs:
                if o.output_name == output_config['output_name']:
                    speaker_config[i] = o
                    o.name = output_config['name']
                    break
        self.speaker_config = speaker_config

        mic_config = self.mic_config.copy()
        saved_config = info.pop('mic_config', [])[:self.n_microphones]
        for j, input_config in enumerate(saved_config):
            for i in self.available_inputs:
                if i.input_name == input_config['input_name']:
                    mic_config[j] = i
                    i.name = input_config['name']
                    break
        self.mic_config = mic_config

        self.experiments = load_experiments(info.pop('experiments', []), Experiment)

        # Setting all remaining items
        for k, v in info.items():
            try:
                setattr(self, k, v)
            except AttributeError:
                raise

    def run_experiment(self, experiment, mode, save, autostart):
        cmd, env = self.build_experiment(experiment)
        pprint.pprint(env)
        print(' '.join(cmd))
        self.process_manager.add_command(cmd, env)
        self.process_manager.open_next_subprocess()

    def build_experiment(self, experiment, save=True):
        env = {
            'WEBSOCKETS_URI': self.process_manager.ws_server.connected_uri,
        }
        for i, speaker in enumerate(self.speaker_config):
            env.update(speaker.get_env_vars(env_prefix=f'SPEAKER_{i+1}'))
        for i, mic in enumerate(self.mic_config):
            env.update(mic.get_env_vars(env_prefix=f'MICROPHONE_{i+1}'))

        args = ['psi', experiment.paradigm.full_name]
        if save:
            # TODO
            pass

        if experiment.preference:
            args.extend(['--preferences', experiment.preference])
        args.extend(['--debug-level-console', self.logging_level.upper()])
        for plugin in experiment.plugins:
            args.extend(['--plugin', plugin])

        return args, env


enamldef Main(MainWindow): main:

    title = 'Auditory Behavior Test Suite'

    attr settings = Settings()
    attr edit_mode = False

    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'Load config\tCtrl+O'
                triggered ::
                    #path = CFTS_ROOT / 'cfts-launcher'
                    path = Path('test')
                    path.mkdir(exist_ok=True, parents=True)
                    filename = FileDialogEx.get_open_file_name(
                        current_path=str(path),
                        name_filters=['Experiment Settings (*.json)'],
                    )
                    if filename:
                        settings.load_config(filename)
            Action:
                text = 'Save config\tCtrl+O'
                triggered ::
                    #path = CFTS_ROOT / 'cfts-launcher'
                    path = Path('test')
                    path.mkdir(exist_ok=True, parents=True)
                    filename = FileDialogEx.get_save_file_name(
                        current_path=str(path),
                        name_filters=['Experiment Settings (*.json)'],
                    )
                    if filename:
                        settings.save_config(filename)
            Action:
                separator = True
            Action:
                text = 'Edit config'
                checkable = True
                checked := main.edit_mode

    Container:

        GroupBox:
            # Set up one row for each speaker connection and each mic
            # connection along with a list of calibrated devices that can be
            # loaded for each.
            title = 'Equipment Configuration'
            flat = True

            layout_constraints => ():
                widgets = visible_widgets()
                labels = widgets[::2]
                selectors = widgets[1::2]
                constraints = [
                    hbox(
                        vbox(*labels),
                        vbox(*selectors),
                    )
                ]
                constraints.extend([align('v_center', l, s) for l, s in zip(labels, selectors)])
                return constraints

            Looper:
                iterable << range(settings.n_speakers)
                ObjectCombo: output_select:
                    items = settings.available_outputs
                    selected << settings.speaker_config[loop_item]
                    selected ::
                        settings.speaker_config[loop_item] = selected
                    to_string = lambda x: x.output_label

                ObjectCombo:
                    items << output_select.selected.available_speakers
                    selected := output_select.selected.name

            Looper:
                iterable << range(settings.n_microphones)
                ObjectCombo: input_select:
                    items = settings.available_inputs
                    selected << settings.mic_config[loop_item]
                    selected ::
                        settings.mic_config[loop_item] = selected
                    to_string = lambda x: x.input_label

                ObjectCombo:
                    items << input_select.selected.available_microphones
                    selected := input_select.selected.name

        GroupBox:
            title = 'Information'
            flat = True

            constraints = [
                vbox(
                    hbox(experimenter_label, experimenter_field),
                    hbox(animal_label, animal_field),
                    hbox(note_label, note_field),
                    hbox(standard_note_label, standard_note_field),
                    hbox(spacer(0), pb_raw),
                ),
                align('right', experimenter_label, animal_label, note_label, standard_note_label),
                align('left', experimenter_label, animal_label, note_label, standard_note_label),
                align('v_center', experimenter_label, experimenter_field),
                align('v_center', animal_label, animal_field),
                align('v_center', note_label, note_field),
                align('v_center', standard_note_label, standard_note_field),
                pb_raw.width == 90,
            ]

            Label: experimenter_label:
                text = 'Experimenter'
            Field: experimenter_field:
                text := settings.experimenter
            Label: animal_label:
                text = 'Animal'
            Field: animal_field:
                text := settings.animal
            Label: note_label:
                text = 'Note'
            Field: note_field:
                text := settings.note
            Label: standard_note_label:
                text = 'Standard notes'
            AddRemoveCombo: standard_note_field:
                selected := settings.standard_note
                items << settings.standard_notes
                items ::
                    settings.standard_notes = items[:]
            PushButton: pb_raw:
                text = '📂 Raw'
                clicked ::
                    os.startfile(DATA_ROOT)

        GroupBox:
            title = 'Experiment'
            flat = True

            ExperimentSequence:
                padding = 0
                paradigm_type = 'animal'
                #start_enabled << bool(main.settings.animal) and bool(main.settings.experimenter)
                sequence := main.settings.experiments
                settings << main.settings
                edit_mode << main.edit_mode
